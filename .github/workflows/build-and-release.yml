name: Build and Release
on:
  workflow_dispatch:
  push:
    tags:
      - '*'
      
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    outputs:
      meta-tag: ${{ steps.meta.outputs.tags }}
      meta-label: ${{ steps.meta.outputs.labels }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cschleiden/replace-tokens@v1
        name: Replace tokens in config
        with:
          files: './.env'
        env:
          VIEWER_JWT_KEY: ${{ secrets.VIEWER_JWT_KEY }}
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  release-test:
    name: Release Test
    environment: test
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cschleiden/replace-tokens@v1
        name: Replace tokens in manifest
        with:
          files: './k8s/manifest.yml'
        env:
          Namespace: remote-falcon-test
          Application: remote-falcon-ui
          Env: test
          Replicas: 1
          Image: ${{ needs.build.outputs.meta-tag }}
          Requests.Memory: 500Mi
          Requests.CPU: 250m
          Limits.Memory: 750Mi
          Limits.CPU: 500m
          Host: remotefalcon.dev
          SubdomainHost: '*.remotefalcon.dev'
          HOST_ENV: test
          VERSION: ${{ needs.build.outputs.meta-label }}
          CONTROL_PANEL_API: https://remotefalcon.dev/remote-falcon-control-panel
          VIEWER_API: https://remotefalcon.dev/remote-falcon-viewer
          DATADOG_CLIENT_TOKEN: ${{ secrets.DATADOG_CLIENT_TOKEN }}
      - name: Install doctl 
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 4fee5fb4-939b-4d7a-8eb0-1b31115a74dc
      - name: Kubectl apply
        run: kubectl apply -f ./k8s/manifest.yml
  release-production:
    name: Release Production
    environment: production
    needs: [build, release-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cschleiden/replace-tokens@v1
        name: Replace tokens in manifest
        with:
          files: './k8s/manifest.yml'
        env:
          Namespace: remote-falcon
          Application: remote-falcon-ui
          Env: production
          Replicas: 2
          Image: ${{ needs.build.outputs.meta-tag }}
          Requests.Memory: 1000Mi
          Requests.CPU: 500m
          Limits.Memory: 1250Mi
          Limits.CPU: 750m
          Host: remotefalcon.com
          SubdomainHost: '*.remotefalcon.com'
          HOST_ENV: production
          VERSION: ${{ needs.build.outputs.meta-label }}
          CONTROL_PANEL_API: https://remotefalcon.com/remote-falcon-control-panel
          VIEWER_API: https://remotefalcon.com/remote-falcon-viewer
          DATADOG_CLIENT_TOKEN: ${{ secrets.DATADOG_CLIENT_TOKEN }}
      - name: Install doctl 
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 4fee5fb4-939b-4d7a-8eb0-1b31115a74dc
      - name: Kubectl apply
        run: kubectl apply -f ./k8s/manifest.yml
